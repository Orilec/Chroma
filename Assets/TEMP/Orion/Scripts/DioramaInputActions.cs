//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/TEMP/Orion/Scripts/DioramaInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DioramaInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DioramaInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DioramaInputActions"",
    ""maps"": [
        {
            ""name"": ""DioramaControl"",
            ""id"": ""bdbafda0-c36f-49aa-bf5f-e9c90f5100c1"",
            ""actions"": [
                {
                    ""name"": ""MouseControlCamera"",
                    ""type"": ""Button"",
                    ""id"": ""d82f15d6-9a1a-49fb-a150-fd5c85a3abbf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""0d1c089f-57e9-48d2-9790-694bbba2b743"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7d3405af-8cee-4806-a263-98b351dd76f7"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseControlCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f627726a-d499-4fce-80e0-52cc84927ae4"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DioramaControl
        m_DioramaControl = asset.FindActionMap("DioramaControl", throwIfNotFound: true);
        m_DioramaControl_MouseControlCamera = m_DioramaControl.FindAction("MouseControlCamera", throwIfNotFound: true);
        m_DioramaControl_Look = m_DioramaControl.FindAction("Look", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DioramaControl
    private readonly InputActionMap m_DioramaControl;
    private List<IDioramaControlActions> m_DioramaControlActionsCallbackInterfaces = new List<IDioramaControlActions>();
    private readonly InputAction m_DioramaControl_MouseControlCamera;
    private readonly InputAction m_DioramaControl_Look;
    public struct DioramaControlActions
    {
        private @DioramaInputActions m_Wrapper;
        public DioramaControlActions(@DioramaInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseControlCamera => m_Wrapper.m_DioramaControl_MouseControlCamera;
        public InputAction @Look => m_Wrapper.m_DioramaControl_Look;
        public InputActionMap Get() { return m_Wrapper.m_DioramaControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DioramaControlActions set) { return set.Get(); }
        public void AddCallbacks(IDioramaControlActions instance)
        {
            if (instance == null || m_Wrapper.m_DioramaControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DioramaControlActionsCallbackInterfaces.Add(instance);
            @MouseControlCamera.started += instance.OnMouseControlCamera;
            @MouseControlCamera.performed += instance.OnMouseControlCamera;
            @MouseControlCamera.canceled += instance.OnMouseControlCamera;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
        }

        private void UnregisterCallbacks(IDioramaControlActions instance)
        {
            @MouseControlCamera.started -= instance.OnMouseControlCamera;
            @MouseControlCamera.performed -= instance.OnMouseControlCamera;
            @MouseControlCamera.canceled -= instance.OnMouseControlCamera;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
        }

        public void RemoveCallbacks(IDioramaControlActions instance)
        {
            if (m_Wrapper.m_DioramaControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDioramaControlActions instance)
        {
            foreach (var item in m_Wrapper.m_DioramaControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DioramaControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DioramaControlActions @DioramaControl => new DioramaControlActions(this);
    public interface IDioramaControlActions
    {
        void OnMouseControlCamera(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
}
